# Routes
# This file defines all application routes (Higher priority routes first)
# 



# Home page
GET     /                       controllers.ProjectController.projects()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file            controllers.Assets.at(path="/public", file)


# Login
GET  /login        				controllers.AccountController.login()
GET  /signup        			controllers.AccountController.signup()
GET  /logout        			controllers.AccountController.logout()
POST /authenticate 				@controllers.AccountController.authenticate()

# User
GET     /setting/profile       	controllers.AccountController.userProfile()


# Projects          
GET     /projects               controllers.ProjectController.projects()
GET     /projects/:id           controllers.ProjectController.viewProject(id: String)
GET     /projects/:id/edit      controllers.ProjectController.editProject(id: String)
GET     /projects/new/          controllers.ProjectController.newProject()
GET     /me/		       	    controllers.ProjectController.me()
GET     /projects/test/         controllers.ProjectController.testProject()


GET     /api/users/:user/contributions     		@controllers.api.ContributionAPIController.getUserContributions(user: String)
GET     /api/users/:user/projects     			@controllers.api.ProjectAPIController.getUserProjects(user: String)
GET     /api/users/:user/favorites/projects     @controllers.api.ProjectAPIController.favorites(user: String)

# API Project
GET     /api/projects              							controllers.api.ProjectAPIController.projects()
GET     /api/projects/new          							@controllers.api.ProjectAPIController.createNewProject()
GET     /api/projects/:id          							controllers.api.ProjectAPIController.project(id: String)
GET 	/api/projects/:projectId/followers/size 			controllers.api.ProjectAPIController.followerSize(projectId: String)
GET 	/api/projects/:projectId/followers 					controllers.api.ProjectAPIController.followers(projectId: String)
GET 	/api/projects/:projectId/comments/size 				controllers.api.CommentAPIController.commentSize(projectId: String)
GET 	/api/projects/:projectId/comments 					controllers.api.CommentAPIController.comments(projectId: String)


POST 	/api/projects			   					controllers.api.ProjectAPIController.save()
POST    /api/projects/:projectId/delete   			controllers.api.ProjectAPIController.deleteProject(projectId: String)
POST    /api/projects/:projectId/publish  			controllers.api.ProjectAPIController.publishProject(projectId: String)
POST 	/api/projects/:projectId/follow 			controllers.api.ProjectAPIController.follow(projectId: String)
POST 	/api/projects/:projectId/unfollow 			controllers.api.ProjectAPIController.unfollow(projectId: String)
POST 	/api/projects/:projectId/comments/:content 			controllers.api.CommentAPIController.post(projectId: String, content: String)


# API Cards

GET     /api/projects/:projectId/cards/:cardId          				controllers.api.ProjectAPIController.card(projectId: String, cardId: String)
GET    	/api/projects/:projectId/cards/new/:type						controllers.api.ProjectAPIController.createCard(projectId: String, type: String)
GET    	/api/projects/:projectId/cards/:cardId/summary					controllers.api.ProjectAPIController.getCardSummary(projectId: String, cardId: String)

POST    /api/projects/:projectId/cards  								controllers.api.ProjectAPIController.addCard(projectId: String)


PUT    	/api/projects/:projectId/cards/:cardId  						controllers.api.ProjectAPIController.updateCard(projectId: String, cardId: String)

DELETE 	/api/projects/:projectId/cards/:cardId 							controllers.api.ProjectAPIController.deleteCard(projectId: String, cardId: String)

# API Contributions

POST 	/api/projects/:projectId/contributions/:contributionId/cancel 	controllers.api.ContributionAPIController.cancelContribution(projectId: String, contributionId: String)
POST    /api/projects/:projectId/cards/:cardId/contributions  			@controllers.api.ContributionAPIController.contribute(projectId: String, cardId: String)

GET 	/api/projects/:projectId/contributions 							controllers.api.ContributionAPIController.getProjectContributions(projectId: String)
GET 	/api/projects/:projectId/contributions/:contributionId 			controllers.api.ContributionAPIController.getContribution(projectId: String, contributionId: String)
GET    	/api/projects/:projectId/cards/:cardId/contributions  			controllers.api.ContributionAPIController.getCardContributions(projectId: String, cardId: String)
GET    	/api/projects/:projectId/cards/:cardId/contributions/new/:type  controllers.api.ContributionAPIController.createContribution(projectId: String, cardId: String, type: String)


GET    	/api/projects/:projectId/cards/new/:type						controllers.api.ProjectAPIController.createCard(projectId: String, type: String)


# API Account


GET     /api/users/:user/followers/size       		@controllers.api.UserAPIController.followerSize(user: String)
GET     /api/users/:user/followers       			@controllers.api.UserAPIController.followers(user: String)
GET     /api/users/:user/following/size       		@controllers.api.UserAPIController.followingSize(user: String)
GET     /api/users/:user/following/name       		@controllers.api.UserAPIController.followingNames(user: String)
GET     /api/users/:user/following       			@controllers.api.UserAPIController.following(user: String)
GET     /api/users/:user/groups/following/size    	@controllers.api.GroupAPIController.followingSize(user: String)
GET     /api/users/:user/groups/following/id    	@controllers.api.GroupAPIController.followingIds(user: String)
GET     /api/users/:user/groups/following    		@controllers.api.GroupAPIController.following(user: String)

GET     /api/users/discovery     					@controllers.api.UserAPIController.userDiscovery()
GET     /api/users     								@controllers.api.UserAPIController.userDiscovery()
GET     /api/users/:user       	    				@controllers.api.UserAPIController.user(user: String)

POST    /api/users/:user/follow       	    		@controllers.api.UserAPIController.follow(user: String)
POST    /api/users/:user/unfollow       			@controllers.api.UserAPIController.unFollow(user: String)

	
GET     /api/account     							@controllers.api.UserAPIController.account()
GET     /api/accounts     							@controllers.api.UserAPIController.accounts()
GET     /api/notifications     						@controllers.api.NotificationAPIController.notifications()

POST    /api/signup     							@controllers.api.UserAPIController.signUp()
POST 	/api/signin/google							@controllers.api.UserAPIController.googleSignIn()
POST    /api/signin     							@controllers.api.UserAPIController.signIn()
POST    /api/profile     							@controllers.api.UserAPIController.updateProfile()
POST    /api/profile/picture     					@controllers.api.UserAPIController.uploadPicture()


# API Notification


GET     /api/notifications     									@controllers.api.NotificationAPIController.notifications()

POST    /api/notifications/acknowledge     						@controllers.api.NotificationAPIController.acknowledgeNotifications()
POST    /api/notifications/:notificationId/acknowledge     		@controllers.api.NotificationAPIController.acknowledgeNotification(notificationId: String)
POST    /api/groups/:groupId/notifications/acknowledge     		@controllers.api.NotificationAPIController.acknowledgeGroupNotifications(groupId: String)
POST    /api/events/:eventId/notifications/acknowledge     		@controllers.api.NotificationAPIController.acknowledgeEventNotifications(eventId: String)


# API Test 

GET    /api/test     											controllers.api.TestController.test()
GET    /api/external/google/profile/:username     				controllers.api.TestController.googlePlusProfile(username: String)


# API Group
GET     /api/groups              								@controllers.api.GroupAPIController.groups()
GET     /api/groups/new          								@controllers.api.GroupAPIController.createNewGroup()
GET     /api/groups/:groupId          							@controllers.api.GroupAPIController.group(groupId: String)
GET     /api/groups/:groupId          							@controllers.api.GroupAPIController.group(groupId: String)
GET 	/api/groups/:groupId/followers/size 					@controllers.api.GroupAPIController.followerSize(groupId: String)
GET 	/api/groups/:groupId/followers 							@controllers.api.GroupAPIController.followers(groupId: String)
GET 	/api/groups/:groupId/sponsors 							@controllers.api.GroupAPIController.sponsors(groupId: String)

POST 	/api/groups			   									@controllers.api.GroupAPIController.create()
PUT 	/api/groups/:groupId			   						@controllers.api.GroupAPIController.update(groupId: String)

    
POST 	/api/groups/:groupId/follow 							@controllers.api.GroupAPIController.follow(groupId: String)
POST 	/api/groups/:groupId/unfollow 							@controllers.api.GroupAPIController.unfollow(groupId: String)

DELETE	/api/groups/:groupId   									@controllers.api.GroupAPIController.deleteGroup(groupId: String)

# API Event
GET     /api/events/timeline              							@controllers.api.EventAPIController.getEventTimeline()
GET     /api/events              									@controllers.api.EventAPIController.events()
GET     /api/groups/:groupId/events/timeline          				@controllers.api.EventAPIController.getEventTimelineByGroup(groupId: String)
GET     /api/groups/:groupId/events/new          					@controllers.api.EventAPIController.createNewEvent(groupId: String)
GET     /api/groups/:groupId/events/size          					@controllers.api.EventAPIController.eventSizeByGroup(groupId: String)
GET     /api/groups/:groupId/events/last          					@controllers.api.EventAPIController.lastGroupEvents(groupId: String)
GET     /api/groups/:groupId/events          						@controllers.api.EventAPIController.groupEvents(groupId: String)
GET     /api/events/:eventId          								@controllers.api.EventAPIController.event(eventId: String)
GET 	/api/events/:eventId/comments/size 							@controllers.api.EventAPIController.commentSize(eventId: String)
GET 	/api/events/:eventId/comments 								@controllers.api.EventAPIController.comments(eventId: String)
GET		/api/events/:eventId/participations/size					@controllers.api.EventAPIController.countParticipations(eventId: String)
GET		/api/events/:eventId/participations/last					@controllers.api.EventAPIController.lastParticipations(eventId: String)
GET		/api/events/:eventId/participations/summary					@controllers.api.EventAPIController.participationSummary(eventId: String)
GET		/api/events/:eventId/participations							@controllers.api.EventAPIController.participations(eventId: String)
GET 	/api/events/:eventId/sponsors 								@controllers.api.EventAPIController.sponsors(eventId: String)

GET 	/api/users/:username/events/:eventId/participation			@controllers.api.EventAPIController.userParticipation(username: String, eventId: String)
GET 	/api/users/:username/participations							@controllers.api.EventAPIController.userParticipations(username: String)


POST    /api/events/:eventId/publish  								@controllers.api.EventAPIController.publishEvent(eventId: String)
POST 	/api/events/:eventId/comments/:content 						@controllers.api.EventAPIController.post(eventId: String, content: String)
POST	/api/events/:eventId/participations/generate				@controllers.api.EventAPIController.generateParticipation(eventId: String)
GET		/api/events/:eventId/participations/generate				@controllers.api.EventAPIController.generateParticipation(eventId: String)

POST	/api/events/:eventId/participations							@controllers.api.EventAPIController.participate(eventId: String)


POST 	/api/events			   										@controllers.api.EventAPIController.create()
PUT 	/api/events/:eventId   										@controllers.api.EventAPIController.update(eventId: String)



DELETE	/api/events/:eventId   										@controllers.api.EventAPIController.deleteEvent(eventId: String)


# API Survey

GET		/api/surveys												@controllers.api.SurveyAPIController.surveys()

POST	/api/surveys												@controllers.api.SurveyAPIController.create()
PUT 	/api/surveys/:surveyId   									@controllers.api.SurveyAPIController.update(surveyId: String)
GET 	/api/surveys/:surveyId   									@controllers.api.SurveyAPIController.survey(surveyId: String)


DELETE	/api/surveys/:surveyId   									@controllers.api.SurveyAPIController.deleteSurvey(surveyId: String)



# Others

GET     /pingWs                     								controllers.Application.pingWs()
GET     /testSpring                     							@controllers.SpringController.index()



